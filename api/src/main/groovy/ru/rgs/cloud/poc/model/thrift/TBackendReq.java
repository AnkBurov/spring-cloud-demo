/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ru.rgs.cloud.poc.model.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-05-02")
public class TBackendReq implements org.apache.thrift.TBase<TBackendReq, TBackendReq._Fields>, java.io.Serializable, Cloneable, Comparable<TBackendReq> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TBackendReq");

  private static final org.apache.thrift.protocol.TField HEADERS_FIELD_DESC = new org.apache.thrift.protocol.TField("headers", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField LASTNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("lastname", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TBackendReqStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TBackendReqTupleSchemeFactory());
  }

  private ru.rgs.cloud.poc.model.thrift.THeaders headers; // required
  private String lastname; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    HEADERS((short)1, "headers"),
    LASTNAME((short)2, "lastname");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // HEADERS
          return HEADERS;
        case 2: // LASTNAME
          return LASTNAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.HEADERS, new org.apache.thrift.meta_data.FieldMetaData("headers", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ru.rgs.cloud.poc.model.thrift.THeaders.class)));
    tmpMap.put(_Fields.LASTNAME, new org.apache.thrift.meta_data.FieldMetaData("lastname", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TBackendReq.class, metaDataMap);
  }

  public TBackendReq() {
  }

  public TBackendReq(
    ru.rgs.cloud.poc.model.thrift.THeaders headers,
    String lastname)
  {
    this();
    this.headers = headers;
    this.lastname = lastname;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TBackendReq(TBackendReq other) {
    if (other.isSetHeaders()) {
      this.headers = new ru.rgs.cloud.poc.model.thrift.THeaders(other.headers);
    }
    if (other.isSetLastname()) {
      this.lastname = other.lastname;
    }
  }

  public TBackendReq deepCopy() {
    return new TBackendReq(this);
  }

  @Override
  public void clear() {
    this.headers = null;
    this.lastname = null;
  }

  public ru.rgs.cloud.poc.model.thrift.THeaders getHeaders() {
    return this.headers;
  }

  public TBackendReq setHeaders(ru.rgs.cloud.poc.model.thrift.THeaders headers) {
    this.headers = headers;
    return this;
  }

  public void unsetHeaders() {
    this.headers = null;
  }

  /** Returns true if field headers is set (has been assigned a value) and false otherwise */
  public boolean isSetHeaders() {
    return this.headers != null;
  }

  public void setHeadersIsSet(boolean value) {
    if (!value) {
      this.headers = null;
    }
  }

  public String getLastname() {
    return this.lastname;
  }

  public TBackendReq setLastname(String lastname) {
    this.lastname = lastname;
    return this;
  }

  public void unsetLastname() {
    this.lastname = null;
  }

  /** Returns true if field lastname is set (has been assigned a value) and false otherwise */
  public boolean isSetLastname() {
    return this.lastname != null;
  }

  public void setLastnameIsSet(boolean value) {
    if (!value) {
      this.lastname = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case HEADERS:
      if (value == null) {
        unsetHeaders();
      } else {
        setHeaders((ru.rgs.cloud.poc.model.thrift.THeaders)value);
      }
      break;

    case LASTNAME:
      if (value == null) {
        unsetLastname();
      } else {
        setLastname((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case HEADERS:
      return getHeaders();

    case LASTNAME:
      return getLastname();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case HEADERS:
      return isSetHeaders();
    case LASTNAME:
      return isSetLastname();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TBackendReq)
      return this.equals((TBackendReq)that);
    return false;
  }

  public boolean equals(TBackendReq that) {
    if (that == null)
      return false;

    boolean this_present_headers = true && this.isSetHeaders();
    boolean that_present_headers = true && that.isSetHeaders();
    if (this_present_headers || that_present_headers) {
      if (!(this_present_headers && that_present_headers))
        return false;
      if (!this.headers.equals(that.headers))
        return false;
    }

    boolean this_present_lastname = true && this.isSetLastname();
    boolean that_present_lastname = true && that.isSetLastname();
    if (this_present_lastname || that_present_lastname) {
      if (!(this_present_lastname && that_present_lastname))
        return false;
      if (!this.lastname.equals(that.lastname))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_headers = true && (isSetHeaders());
    list.add(present_headers);
    if (present_headers)
      list.add(headers);

    boolean present_lastname = true && (isSetLastname());
    list.add(present_lastname);
    if (present_lastname)
      list.add(lastname);

    return list.hashCode();
  }

  @Override
  public int compareTo(TBackendReq other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetHeaders()).compareTo(other.isSetHeaders());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeaders()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.headers, other.headers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastname()).compareTo(other.isSetLastname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastname, other.lastname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TBackendReq(");
    boolean first = true;

    sb.append("headers:");
    if (this.headers == null) {
      sb.append("null");
    } else {
      sb.append(this.headers);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastname:");
    if (this.lastname == null) {
      sb.append("null");
    } else {
      sb.append(this.lastname);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (headers == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'headers' was not present! Struct: " + toString());
    }
    if (lastname == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'lastname' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (headers != null) {
      headers.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TBackendReqStandardSchemeFactory implements SchemeFactory {
    public TBackendReqStandardScheme getScheme() {
      return new TBackendReqStandardScheme();
    }
  }

  private static class TBackendReqStandardScheme extends StandardScheme<TBackendReq> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TBackendReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // HEADERS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.headers = new ru.rgs.cloud.poc.model.thrift.THeaders();
              struct.headers.read(iprot);
              struct.setHeadersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LASTNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastname = iprot.readString();
              struct.setLastnameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TBackendReq struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.headers != null) {
        oprot.writeFieldBegin(HEADERS_FIELD_DESC);
        struct.headers.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.lastname != null) {
        oprot.writeFieldBegin(LASTNAME_FIELD_DESC);
        oprot.writeString(struct.lastname);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TBackendReqTupleSchemeFactory implements SchemeFactory {
    public TBackendReqTupleScheme getScheme() {
      return new TBackendReqTupleScheme();
    }
  }

  private static class TBackendReqTupleScheme extends TupleScheme<TBackendReq> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TBackendReq struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.headers.write(oprot);
      oprot.writeString(struct.lastname);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TBackendReq struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.headers = new ru.rgs.cloud.poc.model.thrift.THeaders();
      struct.headers.read(iprot);
      struct.setHeadersIsSet(true);
      struct.lastname = iprot.readString();
      struct.setLastnameIsSet(true);
    }
  }

}

